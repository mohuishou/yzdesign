<?php
defined('WEKIT_VERSION') or exit(403);
Wind::import('ADMIN:library.AdminBaseController');
Wind::import('SRC:extensions.mADs.admin.tJsonReturn');
/**
 * 后台访问入口
 *
 * generated by phpwind.com
 */
class TypeController extends AdminBaseController {
	use tJsonReturn;
	public function beforeAction($handlerAdapter) {
		parent::beforeAction($handlerAdapter);
		//TODO do something before all the action
	}


	public function doAction($handlerAdapter)
    {
        $this->beforeAction($handlerAdapter);
//        $this->setDefaultTemplateName($handlerAdapter); //重写方法，禁止默认输出
        $method = $this->resolvedActionMethod($handlerAdapter);
        $this->$method();
        if ($this->errorMessage !== null) $this->getErrorMessage()->sendError();
        $this->afterAction($handlerAdapter);
        return $this->forward;
    }


    public function run(){
        $perpage="10";//每页显示条数

        $page = $this->getInput("page");
        $page || $page=1; //当前页码

        $data=$this->_typeDao()->getList($page*$perpage,($page-1)*$perpage);

        $this->setOutput($data,"data");
        $this->setOutput([
            1=>"图片广告",
            2=>"中央弹窗广告",
            3=>"右下角弹窗广告",
            4=>"广告代码"
        ],"types");
        $this->setOutput([
            1=>"新窗口",
            2=>"当前窗口"
        ],"open_types");
        $this->setOutput($perpage,"perpage");
        $this->setOutput($page,"curr");
        $this->setOutput(ceil($this->_typeDao()->getCount() / $perpage),"pages");



        $this->setTemplate("type_list");

    }

    public function editAction(){
        $token=$this->getInput("csrf_token");
        $id=$this->getInput("id");
        if(!$token){
            $data=$this->_typeDao()->get($id);
            $this->setOutput($data,"data");
            $this->setTemplate("type_edit");
        }else{
            $data['type']=$this->getInput('type');
            $data['open_type']=$this->getInput('open_type');
            $res=$this->_typeDao()->update($id,$data);
            if($res){
                $this->success("更新成功!",$data);
            }else{
                $this->error("更新失败！");
            }
        }
    }

    public function addAction(){
	    $token=$this->getInput("csrf_token");
        if(!$token){
            $this->setTemplate("type_add");
        }else{
            $data['name']=$this->getInput('name');
            $data['type']=$this->getInput('type');
            $data['open_type']=$this->getInput('open_type');
            $res=$this->_typeDao()->add($data);
            if($res){
                $this->success("新增成功!",$data);
            }else{
                $this->error("新增失败！");
            }
        }
    }


    public function deleteAction(){
        $id=$this->getInput('id');

        //检查该分类下是否有广告存在
        $ads=$this->_itemDao()->countByWhere('type_id='.$id);
        if($ads>0){
            $this->error('该分类下存在广告，请点击查看先将广告删除！');
            return false;
        }

        $res=$this->_typeDao()->delete($id);
        if($res){
            $this->success("删除成功!");
        }else{
            $this->error("删除失败！");
        }
    }

    private function _itemDao(){
        return Wekit::load('SRC:extensions.mADs.service.dao.App_MADs_ItemDao');
    }

    private function _typeDao(){
        return Wekit::load('SRC:extensions.mADs.service.dao.App_MADs_TypeDao');
    }



}

?>